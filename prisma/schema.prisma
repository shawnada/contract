// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// 数据模型
model Doc {
    id        String   @id @default(cuid())
    title     String
    content   String?  // 存储文档的URL路径
    fileKey   String?  // 存储OnlyOffice文档的key
    version   Int      @default(1) // 添加版本字段
    status    String   @default("active") // 文档状态：active, archived, deleted
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    comments  Comment[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([fileKey])
}

// NextAuth Adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  docs          Doc[]
  comments      Comment[]
  standards     Standard[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 批注模型
model Comment {
  id          String   @id @default(cuid())
  content     String   // 评论内容
  riskLevel   String?  // 风险等级
  position    Json?    // 评论在文档中的位置信息
  userId      String   // 评论者ID
  user        User     @relation(fields: [userId], references: [id])
  doc         Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)
  docId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([docId])
}

// 审核标准模型
model Standard {
  id        String   @id @default(cuid())
  title     String
  rules     Rule[]
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// 审核规则模型
model Rule {
  id         String   @id @default(cuid())
  category   String   // 风险分类
  level      String   // 风险等级
  principle  String   // 审核原则
  clause     String   // 标准条款
  standardId String
  standard   Standard @relation(fields: [standardId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([standardId])
}
