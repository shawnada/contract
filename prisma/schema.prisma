// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// 数据模型
model Doc {
    id        String  @id @default(cuid())
    title     String
    content   Json    @default("{}")    // 明确指定为 Json 类型
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user    User     @relation(fields: [userId], references: [id])
    userId  String
    comments  Comment[]
}

// NextAuth Adapter models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  docs          Doc[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 批注模型
model Comment {
  groupId           String   @id    // 使用 groupId 作为主键
  content          String
  additionalContent String?
  riskLevel        String?
  userName         String
  rangeText        String
  createdDate      DateTime @default(now())
  doc              Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)
  docId            String
}
